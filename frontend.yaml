AWSTemplateFormatVersion: '2010-09-09'
Description: 'Web front-end stack'
Parameters:
  DNSStack:
    Type: String
    Description: "DNS stack's name"

Resources:

  ######################################
  # S3-backend
  #
  # Contains actual front-end resources,
  # which CloudFront serves.
  ######################################

  AppBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: 'Private'
      BucketName: !Sub "${AWS::StackName}-frontend"

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: AppCloudFrontIdentity
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: 'PolicyForCloudFrontPrivateContent'
        Statement:
          - Sid: 'AllowCloudFrontGet'
            Effect: 'Allow'
            Principal:
              AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref AppBucket]]
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AppBucket', '/*']]

  ############
  # CloudFront
  ############

  AppCloudFrontIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Front-end app CloudFront origin access identity'

  AppCloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - AppBucket
    Properties:
      DistributionConfig:
        Aliases:
          -
            Fn::ImportValue:
              !Sub "${DNSStack}-DomainName"
        Comment: 'Cloudfront Distribution pointing to S3 bucket'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        # TODO: Logging
        Origins:
          - DomainName: !GetAtt AppBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${AppCloudFrontIdentity}"
        PriceClass: PriceClass_100 # USA & Europe only
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn # TODO: Generate cert in template
          SslSupportMethod: sni-only

  ############
  # Networking
  ############

  AppDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Sub "${DNSStack}-PublicZoneId"
      RecordSets:
        - Comment: 'Public domain name for front-end app'
          Name:
            Fn::ImportValue:
              !Sub "${DNSStack}-DomainName"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [AppCloudFront, DomainName]
